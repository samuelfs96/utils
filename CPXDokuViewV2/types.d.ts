interface UploadUrl {
  value?: string;
  error?: string;
  isLoading?: boolean;
}

export interface DokuViewProps {
  fileID: any;
  filterItems: string;
  template: string;
  selectedTab: string;
  selectedFiles: any[];
  selectedGroup: any;
  isLoadingGroups: boolean;
  enableCompress: boolean;
  formatConvert: boolean;
  isCmdPressed: boolean;
  avatarUpdateNumber: number;
  uploadUrl: UploadUrl;
  files: any[];
  copyFiles: any;
  groups: any[];
  formItem;
  DKConfig: any;
  AIConfig: any;
  supported: any[];
  listUploadFiles: any[];
  MDRInfoValSelected: any;
  tempInfoDoku: any;
  isLoadingTempInfoDoku: boolean;
  tempInfoFormKeys: any;
  isLoadingTempInfoFormKeys: boolean;
  ModalDoku: any;
  PopperUseAs: any;
  ModalEditFile: boolean;
  ModalMoveGroup: boolean;
  ModalConfirmDelete: boolean;
  ModalConfirmAIDelete: boolean | string;
  hasError: boolean;
  messageError: any;
  user: any;
  service: any;
  dropzone: any;
  showClose: any;
  tempInfo: any;
  docGroups: any[];
  groupsInfo: any[];
  mediaGroups: any[];
  hiddenSubGroups: any[];
  protectedGroups: any[];
  protectedSubGroups: any[];
  ComJumps: number;
  NumPagView: number;
  MaxItemsInPage: number;
  thereSomeChange: boolean;
  currR: any;
  designDefID: string;
  designID: any;
  props: any;
  IS_SSEARCH: boolean;
  AvatarSubGroups: any[];
  myDropzone: any;
  scrollContent: any;
  DokuTempsItemsForProp: any;
  DokuTempsItemsForTab: any;
  isMobile: boolean;
}

export interface DokuViewState extends DokuViewProps {
  DoFetches: (isRefresh?: boolean) => Promise<any>;
  getFetchQuery: (row?: any, IDQ?: any, config?: any) => Promise<any>;
  fetchSSearch: (text: string) => Promise<any>;
  initDropZone: () => any;
  handleBulkES: () => Promise<any>;
  keyDown: (event?: any) => any;
  keyUp: (event?: any) => any;
  isValidFileExt: (fileName?: any) => any;
  getSelectedFile: (fileID?: any) => any;
  getSubGroupFromFile: (fileName?: any, selectedGroup?: any, extension?: string) => any;
  getFormattedFileFromServer: (file?: any, {}: any) => any;
  openPanelUpload: () => any;
  updateFileUpload: (fileID?: any, obj?: any, callback?: () => any) => any;
  updateFileData: (fileID?: any, dataUpdate?: any, dataUpdateX?: any, callback?: () => any) => any;
  isUploadingFile: () => any;
  clearPagValues: () => any;
  updateDokuAvatars: () => Promise<any>;
  handleCancelAllFeths: () => any;
  handleMoveGroup: (selectedToMoveGroup?: any, noFromModal?: boolean) => Promise<any>;
  handleUseAs: (event?: any, selectedToUseAs?: any) => Promise<any>;
  handleEditFileName: (newName?: any) => any;
  handleDeleteFile: (confirmed?: any) => any;
  handleClosePanel: () => any;
  handleClickReload: () => any;
  handleDeleleListUploadFile: (file?: any, callback?: () => any) => any;
  handleInitUpload: () => any;
  handleConvertFile: () => any;
  handleChangeCompress: (id?: any, value?: any) => any;
  handleCompressFile: () => any;
  handleChangeTab: (tab?: any) => any;
  handleInputSearch: (text?: any) => any;
  handleKeyPressSearch: (event?: any) => any;
  handleCloseMdlFile: () => any;
  handleClose: () => any;
  handleClickFileItem: (file?: any) => () => any;
  handleSelectFile: (file?: any) => (event?: any) => any;
  handleSelectAllGroup: (group?: any) => (event?: any) => any;
  handleClickContent: () => any;
  handleFetchAnalysis: (isFromCli?: boolean, forceToServer?: boolean) => Promise<any>;
  handleSaveKeysForFile: (isFormAnalizer?: boolean, {}: any) => Promise<any>;
  handleSaveDataTextForFile: () => Promise<any>;
  handleClickBox: (item?: any) => any;
  handleConfigKey: (Id?: any) => any;
  handleChangeKeyForBox: (_n?: any, value?: any) => any;
  handleChangeKeyValue: (fieldOrValueObj?: any, value?: any, setAIAsModified?: boolean) => any;
  handleChangeStepAnalizer: (step?: any, {}: any) => Promise<any>;
  handleBuildJSONKeys: (clave?: any, {}: any) => any;
  getAIInitialFileConfig: () => any;
  handleGoToSelectProvider: () => any;
  handleDeleteAI: (confirmed?: boolean, isDeleteFile?: boolean | string) => Promise<any>;
  handleEditAI: () => Promise<any>;
  searchRecords: (allFiles?: any[], extraConfig?: any) => any;
  getFilesToRender: () => any;
  handleOpenTemplate: () => any;
  openEditDokuForm: () => any;
  CtrlContentScrollTo: (to?: any) => any;
  handleChangePagination: (value?: any) => any;
  handleChangeUploadGroup: (group?: any) => () => any;
  handleChangeUploadUrl: (_?: any, value?: any) => any;
  handleUploadFileFromUrl: () => Promise<any>;
  selectedTabAction: (selectedTab: string) => void;
  renderDokuWTemplate: () => any;
}
